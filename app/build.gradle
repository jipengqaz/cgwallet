apply plugin: 'com.android.application'
apply plugin: 'newlens'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "cgtz.com.cgwallet"
        minSdkVersion 11
        targetSdkVersion 22
        versionCode 2
        versionName "1.1.0"
    }
    signingConfigs{
        releaseConfig{
            storeFile file("cgwallet.jks")
            storePassword KEYSTORE_PASSWORD
            keyAlias "wallet"
            keyPassword KEY_PASSWORD
        }
    }
    buildTypes {
        debug {
            minifyEnabled false               // debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.releaseConfig
            minifyEnabled true   //true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    packagingOptions {
        exclude 'AndroidManifest.xml'
        exclude 'resources.arsc'
        exclude 'classes.dex'
        exclude 'res/mipmap/icon_logo'
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
        disable 'InvalidPackage'
    }

    productFlavors {
        cgwallet {}
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.networkbench.newlens.agent.android:nbs.newlens.agent:2.2.5'
    compile files('libs/nineoldandroids-2.4.0.jar')
    compile files('libs/umeng-update-v2.6.0.1.jar')
    compile files('libs/litepal-1.2.0.jar')
}
// 为了增加libs中的.so文件
task copyNativeLibs(type: Copy) {
    from(new File('libs')) { include '**/*.so' }
    into new File(buildDir, 'native-libs')
}
tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn copyNativeLibs }

clean.dependsOn 'cleanCopyNativeLibs'

tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
    pkgTask.jniFolders = new HashSet<File>()
    pkgTask.jniFolders.add(new File(buildDir, 'native-libs'))
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
